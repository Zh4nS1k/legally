package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	"github.com/ledongthuc/pdf"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo/options"
	"io"
	"legally/db"
	"log"
	"net/http"
	"os"
	"strings"
	"time"
)

const (
	model       = "deepseek/deepseek-r1-0528:free"
	apiEndpoint = "https://openrouter.ai/api/v1/chat/completions"
)

func main() {
	_ = godotenv.Load()
	db.InitMongo()
	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
	if err := os.MkdirAll("./temp", os.ModePerm); err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É:", err)
	}

	router := gin.Default()
	router.Static("/static", "./public")
	router.GET("/", func(c *gin.Context) {
		c.File("./public/index.html")
	})
	router.POST("/api/analyze", analyzeDocumentHandler)
	router.GET("/api/laws", getRelevantLawsHandler)
	router.GET("/api/history", getHistoryHandler)

	// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
	router.Use(func(c *gin.Context) {
		start := time.Now()
		c.Next()
		latency := time.Since(start)
		log.Printf("%s %s %d %v", c.Request.Method, c.Request.URL.Path, c.Writer.Status(), latency)
	})

	log.Println("‚úÖ SUCCESS: –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000")
	if err := router.Run(":3000"); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}
}

func analyzeDocumentHandler(c *gin.Context) {
	log.Println("üîÑ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞")

	file, err := c.FormFile("document")
	if err != nil {
		log.Println("‚ùå ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª:", err)
		c.JSON(http.StatusBadRequest, gin.H{"error": "–§–∞–π–ª –Ω–µ –ø–æ–ª—É—á–µ–Ω"})
		return
	}

	tempPath := fmt.Sprintf("./temp/%d_%s", time.Now().Unix(), file.Filename)
	if err := c.SaveUploadedFile(file, tempPath); err != nil {
		log.Println("‚ùå ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞"})
		return
	}
	defer func() {
		if err := os.Remove(tempPath); err != nil {
			log.Println("‚ùå WARNING: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:", err)
		}
	}()

	text, err := extractTextFromDocument(tempPath)
	if err != nil {
		log.Println("‚ùå ERROR: –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	log.Printf("‚ÑπÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–æ %d —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞", len(text))

	parts := splitTextByChars(text, 12000)
	log.Printf("‚ÑπÔ∏è –î–æ–∫—É–º–µ–Ω—Ç —Ä–∞–∑–±–∏—Ç –Ω–∞ %d —á–∞—Å—Ç–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", len(parts))

	var analysisResults []string
	for i, part := range parts {
		log.Printf("üîÑ –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–∏ %d/%d...", i+1, len(parts))
		result, err := analyzeDocumentPart(part)
		if err != nil {
			log.Println("‚ùå ERROR –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Å—Ç–∏:", err)
			c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
			return
		}
		log.Printf("‚úÖ –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç–∏ %d –∑–∞–≤–µ—Ä—à—ë–Ω, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª–∏–Ω–æ–π %d —Å–∏–º–≤–æ–ª–æ–≤", i+1, len(result))
		analysisResults = append(analysisResults, result)
	}

	fullAnalysis := strings.Join(analysisResults, "\n\n---\n\n")
	docType := detectDocumentType(text)

	log.Println("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É")
	log.Printf("‚ÑπÔ∏è –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: %s, –¥–ª–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞: %d —Å–∏–º–≤–æ–ª–æ–≤", docType, len(fullAnalysis))

	_, err = db.GetCollection("analyses").InsertOne(context.TODO(), bson.M{
		"filename":   file.Filename,
		"type":       docType,
		"analysis":   fullAnalysis,
		"text":       text,
		"created_at": time.Now(),
	})
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Mongo:", err)
	}

	c.JSON(http.StatusOK, gin.H{
		"analysis":      fullAnalysis,
		"timestamp":     time.Now().Format(time.RFC3339),
		"document_type": docType,
	})
}

func extractTextFromDocument(path string) (string, error) {
	log.Printf("‚ÑπÔ∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: %s", path)

	f, r, err := pdf.Open(path)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: %v", err)
	}
	defer f.Close()

	var buf bytes.Buffer
	b, err := r.GetPlainText()
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: %v", err)
	}
	if _, err := io.Copy(&buf, b); err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: %v", err)
	}

	text := buf.String()
	if len(text) == 0 {
		return "", fmt.Errorf("—Ñ–∞–π–ª –ø—É—Å—Ç")
	}

	// –û—á–∏—Å—Ç–∫–∞ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
	text = strings.Join(strings.Fields(text), " ")
	return text, nil
}

func analyzeDocumentPart(text string) (string, error) {
	prompt := fmt.Sprintf(`–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. 
–í—ã—è–≤–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏, –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. 
–°–≥—Ä—É–ø–ø–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
1. –ü—Ä–∞–≤–æ–≤—ã–µ —Ä–∏—Å–∫–∏
2. –ù–µ—è—Å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
3. –í–æ–∑–º–æ–∂–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–î–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ–±–ª–µ–º—ã —É–∫–∞–∂–∏:
- –û–ø–∏—Å–∞–Ω–∏–µ
- –ó–∞–∫–æ–Ω/—Å—Ç–∞—Ç—å—é
- –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (–≤—ã—Å–æ–∫–∏–π, —Å—Ä–µ–¥–Ω–∏–π, –Ω–∏–∑–∫–∏–π)
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é

–î–æ–∫—É–º–µ–Ω—Ç:
%s`, text)

	log.Printf("‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª–∏–Ω–æ–π %d —Å–∏–º–≤–æ–ª–æ–≤", len(text))
	return queryOpenRouter(prompt)
}

func queryOpenRouter(prompt string) (string, error) {
	apiKey := os.Getenv("OPENROUTER_API_KEY")
	if apiKey == "" {
		return "", fmt.Errorf("OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	payload := map[string]interface{}{
		"model": model,
		"messages": []map[string]string{
			{"role": "system", "content": "–¢—ã ‚Äî —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –¥–∞–≤–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã."},
			{"role": "user", "content": prompt},
		},
		"temperature": 0.3,
		"max_tokens":  4000,
	}

	body, err := json.Marshal(payload)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ payload: %w", err)
	}

	log.Printf("‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ OpenRouter, –¥–ª–∏–Ω–∞ —Ç–µ–ª–∞: %d –±–∞–π—Ç", len(body))

	req, err := http.NewRequest("POST", apiEndpoint, bytes.NewBuffer(body))
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}

	req.Header.Set("Authorization", "Bearer "+apiKey)
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("HTTP-Referer", "https://legally.kz")
	req.Header.Set("X-Title", "Legally AI Risk Analyzer")

	client := &http.Client{Timeout: 120 * time.Second}
	resp, err := client.Do(req)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter: %w", err)
	}
	defer resp.Body.Close()

	resBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ OpenRouter: %w", err)
	}

	log.Printf("‚¨ÖÔ∏è –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter, —Å—Ç–∞—Ç—É—Å: %d, –¥–ª–∏–Ω–∞ —Ç–µ–ª–∞: %d –±–∞–π—Ç", resp.StatusCode, len(resBody))

	if resp.StatusCode != http.StatusOK {
		log.Printf("‚ùå –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π: %s", string(resBody))
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç OpenRouter: —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode)
	}

	var res struct {
		Choices []struct {
			Message struct {
				Content string `json:"content"`
			} `json:"message"`
		} `json:"choices"`
		Error struct {
			Message string `json:"message"`
		} `json:"error"`
	}

	if err := json.Unmarshal(resBody, &res); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç AI: %w", err)
	}

	if res.Error.Message != "" {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç API: %s", res.Error.Message)
	}

	if len(res.Choices) == 0 || res.Choices[0].Message.Content == "" {
		return "", fmt.Errorf("–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter")
	}

	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI –¥–ª–∏–Ω–æ–π %d —Å–∏–º–≤–æ–ª–æ–≤", len(res.Choices[0].Message.Content))
	return res.Choices[0].Message.Content, nil
}

func splitTextByChars(text string, maxChars int) []string {
	var parts []string
	runes := []rune(text)
	for start := 0; start < len(runes); start += maxChars {
		end := start + maxChars
		if end > len(runes) {
			end = len(runes)
		}
		parts = append(parts, string(runes[start:end]))
	}
	return parts
}

func detectDocumentType(text string) string {
	text = strings.ToLower(text)
	switch {
	case strings.Contains(text, "–¥–æ–≥–æ–≤–æ—Ä"):
		return "–î–æ–≥–æ–≤–æ—Ä"
	case strings.Contains(text, "–ø—Ä–∏–∫–∞–∑"):
		return "–ü—Ä–∏–∫–∞–∑"
	case strings.Contains(text, "–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"):
		return "–ü–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"
	case strings.Contains(text, "–∑–∞–∫–æ–Ω"):
		return "–ó–∞–∫–æ–Ω"
	case strings.Contains(text, "—Ä–µ—à–µ–Ω–∏–µ"):
		return "–†–µ—à–µ–Ω–∏–µ"
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
	}
}

func getRelevantLawsHandler(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{
		"laws": []map[string]string{
			{"name": "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–ö", "url": "https://adilet.zan.kz/rus/docs/K950001000_"},
			{"name": "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–ö", "url": "https://adilet.zan.kz/rus/docs/K2100000409"},
			{"name": "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–ö", "url": "https://adilet.zan.kz/rus/docs/K1500000011"},
			{"name": "–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –†–ö", "url": "https://adilet.zan.kz/rus/docs/K1400000233"},
		},
	})
}
func getHistoryHandler(c *gin.Context) {
	coll := db.GetCollecti  on("analyses")
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	cursor, err := coll.Find(ctx, bson.M{}, options.Find().SetSort(bson.D{{"created_at", -1}}))
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Mongo:", err)
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏"})
		return
	}
	defer cursor.Close(ctx)

	var results []bson.M
	if err := cursor.All(ctx, &results); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"})
		return
	}

	c.JSON(http.StatusOK, results)
}
